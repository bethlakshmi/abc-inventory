# Generated by Django 2.2.17 on 2020-12-21 19:13

from django.db import migrations

init_values = {
        '.bootstrap-table.fullscreen': {
            'pseudo_class': '',
            'description': 'The table, when expanded to full screen',
            'target_element': 'div',
            'usage': 'Big Table',
            'prop_val': [('background-color', 'white')]},
        '#inventory-navbar-brand': {
            'pseudo_class': '',
            'description': 'The site name at the upper left of the navbar',
            'target_element': 'a',
            'usage': 'Navbar',
            'prop_val': [('color', 'black')]},
        '.btn-inventory-secondary': {
            'pseudo_class': 'hover',
            'description': 'Any active, but less important button, on hover',
            'target_element': 'button',
            'usage': 'Big Table',
            'prop_val': [('background-color', '#5a6268'),
                         ('border-color', '#5a6268'),
                         ('color', '#fff')]},
        '.btn-inventory-secondary': {
            'pseudo_class': 'Right now - the buttons above the table.',
            'description': 'button',
            'target_element': '',
            'usage': 'Big Table',
            'prop_val': [('background-color', '#6c757d'),
                         ('border-color', '#6c757d'),
                         ('color', '#fff')]},
        '.detail-icon': {
            'pseudo_class': '',
            'description': 'The + sign on a table',
            'target_element': 'a',
            'usage': 'Big Table',
            'prop_val': [('color', '#007bff')]},
        '.detail-icon': {
            'pseudo_class': 'hover',
            'description': 'The + sign on a table, on hover',
            'target_element': 'a',
            'usage': 'Big Table',
            'prop_val': [('color', '#0056b3')]},
        '.inventory-detail': {
            'pseudo_class': '',
            'description': 'The action icons on a table',
            'target_element': 'a',
            'usage': 'Big Table',
            'prop_val': [('color', '#007bff')]},
        '.inventory-detail': {
            'pseudo_class': 'hover',
            'description': 'The action icons on a table, on hover',
            'target_element': 'a',
            'usage': 'Big Table',
            'prop_val': [('color', '#0056b3')]},
        '.dropdown-menu': {
            'pseudo_class': '',
            'description': 'The background of the table dropdown menu',
            'target_element': 'div',
            'usage': 'Navbar',
            'prop_val': [('background-color', 'white')]},
        '.inventory-alert-danger': {
            'pseudo_class': '',
            'description': 'Alerts that show up dynamically on Error',
            'target_element': 'div',
            'usage': 'Alerts',
            'prop_val': [('background-color', '#f8d7da'),
                         ('border-color', '#f5c6cb'),
                         ('color', '#721c24')]},
        '.inventory-alert-info': {
            'pseudo_class': '',
            'description': 'Alerts that show up dynamically as Information',
            'target_element': 'div',
            'usage': 'Alerts',
            'prop_val': [('background-color', '#d1ecf1'),
                         ('border-color', '#bee5eb'),
                         ('color', '#0c5460')]},
        '.inventory-alert-success': {
            'pseudo_class': '',
            'description': 'Alerts that show up dynamically on Success',
            'target_element': 'div',
            'usage': 'Alerts',
            'prop_val': [('background-color', '#d4edda'),
                         ('border-color', '#c3e6cb'),
                         ('color', '#155724')]},
        '.inventory-alert-warning': {
            'pseudo_class': '',
            'description': 'Alerts that show up dynamically on Warning',
            'target_element': 'div',
            'usage': 'Alerts',
            'prop_val': [('background-color', '#fff3cd'),
                         ('border-color', '#ffeeba'),
                         ('color', '#856404')]},
        '.inventory-btn-light': {
            'pseudo_class': 'hover',
            'description': 'Hover for buttons that terminate the work',
            'target_element': 'input',
            'usage': 'Forms',
            'prop_val': [('background-color', '#e2e6ea'),
                         ('border-color', '#e2e6ea'),
                         ('color', '#212529')]},
        '.inventory-btn-light': {
            'pseudo_class': 'Buttons like cancel that interrupt work.',
            'description': 'input',
            'target_element': '',
            'usage': 'Forms',
            'prop_val': [('background-color', '#f8f9fa'),
                         ('border-color', '#f8f9fa'),
                         ('color', '#212529')]},
        '.inventory-btn-primary': {
            'pseudo_class': 'hover',
            'description': 'Hover for main buttons.',
            'target_element': 'input',
            'usage': 'Forms',
            'prop_val': [('background-color', '#0069d9'),
                         ('border-color', '#0062cc'),
                         ('color', '#fff')]},
        '.inventory-btn-primary': {
            'pseudo_class': '',
            'description': 'Buttons do the main work flow.',
            'target_element': 'input',
            'usage': 'Forms',
            'prop_val': [('background-color', '#007bff'),
                         ('border-color', '#007bff'),
                         ('color', '#fff')]},
        '.inventory-form-error': {
            'pseudo_class': '',
            'description': 'Text that informs user of a form error.',
            'target_element': 'font',
            'usage': 'Forms',
            'prop_val': [('color', 'red')]},
        '.inventory-form-required': {
            'pseudo_class': 'The * on required form fields',
            'description': 'font',
            'target_element': '',
            'usage': 'Forms',
            'prop_val': [('color', 'red')]},
        '.inventory-nav-link': {
            'pseudo_class': 'hover',
            'description': 'Items in drop down menus on hover.',
            'target_element': 'font',
            'usage': 'Navbar',
            'prop_val': [('color', 'rgba(0,0,0,.7)')]},
        '.inventory-nav-link': {
            'pseudo_class': '',
            'description': 'Items in drop down menu made with Django CMS',
            'target_element': 'font',
            'usage': 'Navbar',
            'prop_val': [('color', 'rgba(0,0,0,.5)')]},
        '.inventory-title': {
            'pseudo_class': '',
            'description': 'Biggest Header on the page',
            'target_element': 'h2',
            'usage': 'General',
            'prop_val': [('color', 'black')]},
        '.inventory-subtitle': {
            'pseudo_class': '',
            'description': 'Second Biggest Header on the page',
            'target_element': 'h3',
            'usage': 'General',
            'prop_val': [('color', 'grey')]},
        'body.full-page': {
            'pseudo_class': '',
            'description': 'Body of the page, but only for things like whole page tables',
            'target_element': 'div',
            'usage': 'Big Table',
            'prop_val': [('background-color', 'white'),
                         ('color', 'black')]},
        'body.with-margin': {
            'pseudo_class': '',
            'description': 'Body of the page, for any page with margins',
            'target_element': 'div',
            'usage': 'General',
            'prop_val': [('background-color', 'white'),
                         ('color', 'black')]},
        '.inventory-table-header': {
            'pseudo_class': '',
            'description': 'Table headers',
            'target_element': 'div',
            'usage': 'Big Table',
            'prop_val': [('background-color', '#F5F5F5'),
                         ('color', 'black')]},
        '.inventory-table-success': {
            'pseudo_class': '',
            'description': 'Table row when it was just successfully updated',
            'target_element': 'div',
            'usage': 'Big Table',
            'prop_val': [('background-color', '#c3e6cb')]},
        '.inventory-table > thead > tr > th': {
            'pseudo_class': '',
            'description': 'Table - header cell borders',
            'target_element': 'div',
            'usage': 'Big Table',
            'prop_val': [('border', '1px solid grey')]},
        '.inventory-table > tbody > tr > td': {
            'pseudo_class': '',
            'description': 'Table - body cell borders',
            'target_element': 'div',
            'usage': 'Big Table',
            'prop_val': [('border', '1px solid grey')]},
    }


def initialize_style(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    StyleVersion = apps.get_model("inventory", "StyleVersion")
    StyleSelector = apps.get_model("inventory", "StyleSelector")
    StyleProperty = apps.get_model("inventory", "StyleProperty")
    StyleValue = apps.get_model("inventory", "StyleValue")
    version = StyleVersion(
        name="Baseline",
        number=1.0,
        currently_live=True,
        currently_test=True)
    version.save()

    for select_key, select_val in init_values.items():
        selector = StyleSelector(
            selector=select_key,
            description=select_val['description'],
            pseudo_class=select_val['pseudo_class'],
            target_element_usage=select_val['target_element'],
            used_for=select_val['usage'])
        selector.save()
        for prop, val in select_val['prop_val']:
            style_prop = StyleProperty(
                selector=selector,
                style_property=prop,
                value_type='color')
            style_prop.save()
            value = StyleValue(style_property=style_prop,
                               style_version=version,
                               value=val)
            value.save()


def destroy_style(apps, schema_editor):
    StyleVersion = apps.get_model("inventory", "StyleVersion")
    StyleSelector = apps.get_model("inventory", "StyleSelector")
    StyleVersion.objects.filter(name="Baseline", number=1.0).delete()
    for select_key, select_val in init_values.items():
        StyleSelector.objects.filter(
            selector=select_key,
            pseudo_class=select_val['pseudo_class']).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('inventory', '0004_auto_20201221_1909'),
    ]

    operations = [
        migrations.RunPython(initialize_style, reverse_code=destroy_style),
    ]
